export type ValueOf<T> = T extends unknown ? T[keyof T] : never;
export type Prettify<T> = {
    [K in keyof T]: T[K];
};
export type AnyObject<T> = Partial<Record<keyof T, ValueOf<T>>>;
export type ObjectKeys<T> = (keyof T)[];
export type ObjectValues<T> = ValueOf<T>[];
export type ObjectEntries<T> = [keyof T, ValueOf<T>][];
export declare const objectKeys: <T extends Partial<Record<keyof T, ValueOf<T>>>>(object: T) => (keyof T)[];
export declare const objectValues: <T extends Partial<Record<keyof T, ValueOf<T>>>>(object: T) => ValueOf<T>[];
export declare const objectEntries: <T extends Partial<Record<keyof T, ValueOf<T>>>>(object: T) => [keyof T, ValueOf<T>][];
export declare const object: Readonly<{
    keys: <T extends Partial<Record<keyof T, ValueOf<T>>>>(object: T) => (keyof T)[];
    values: <T_1 extends Partial<Record<keyof T_1, ValueOf<T_1>>>>(object: T_1) => ValueOf<T_1>[];
    entries: <T_2 extends Partial<Record<keyof T_2, ValueOf<T_2>>>>(object: T_2) => [keyof T_2, ValueOf<T_2>][];
}>;
