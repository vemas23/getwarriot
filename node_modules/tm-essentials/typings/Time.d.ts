export = TimeSpan;
declare class TimeSpan {
    /**
     * Returns the {@link Time} class with a null value.
     * @returns {Time} {@link Time}
     */
    static noTime: Time;
    /**
     * Returns the {@link Time} class with a value in milliseconds.
     * @param {number} ms
     * @returns {Time} {@link Time}
     */
    static fromMilliseconds(ms: number): Time;
    /**
     * Returns the {@link Time} class with a value in seconds. All numbers after the decimal point are parsed as milliseconds.
     * @param {number} s
     * @returns {Time} {@link Time}
     */
    static fromSeconds(s: number): Time;
    /**
     * Returns the {@link Time} class with a value in minutes. All numbers after the decimal point are parsed as seconds.
     * @param {Number} m
     * @returns {Time} {@link Time}
     */
    static fromMinutes(m: number): Time;
    /**
     * Returns the {@link Time} class with a value in hours. All numbers after the decimal point are parsed as minutes.
     * @param {Number} h
     * @returns {Time} {@link Time}
     */
    static fromHours(h: number): Time;
}
declare class Time {
    /**
     * Trackmania Time formatters.
     * @param {number|null} time Time in milliseconds
     */
    constructor(time: number | null);
    /**
     * Time in milliseconds
     * @type {number|null}
     */
    time: number | null;
    /**
     * Output the time in the format "hh:mm:ss.ms"
     * @param {boolean} useHundreds If true, return the time in the hundreds of milliseconds
     * @returns {string}
     */
    toTmString(useHundreds?: boolean): string;
}
